{"version":3,"sources":["../../src/controllers/question.server.controller.js"],"names":["createQuestion","req","res","next","console","log","JSON","stringify","body","question","options","newQuestion","author","qbank","save","err","ques","json","success","message","fetchQuestions","params","qBid","page","parseInt","limit","last_skip_value","find","populate","path","skip","exec","count","countQuestions","deleteQuestion","quesId","findByIdAndRemove","updateQuestion","id","_id","findOneAndUpdate","$set"],"mappings":"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","file":"question.server.controller.js","sourcesContent":["// ./user-expressjs-backend/controllers/question.server.controller.js\nimport User from '../models/user.server.model';\nimport qBank from '../models/qBank.server.model';\nimport Question from '../models/question.server.model';\n\nexport const createQuestion = (req,res,next) => {\n  console.log('createQuestion: '+JSON.stringify(req.body));\n  if(req.body.question && req.body.options){\n    let newQuestion = new Question();\n    newQuestion.question = req.body.question;\n    newQuestion.author = req.body.author;\n    newQuestion.qbank = req.body.qbank;\n    newQuestion.save((err,ques) => {\n      if(err) {\n           console.log(err);\n           return res.json({success:false,message:'Something going wrong',err});\n      }\n      else{\n        if(ques){\n          req.ques = ques;\n          next();\n        }else{\n          return res.json({success:false,message:'Something going wrong'});\n        }\n      }\n    })\n  }else{\n    return res.json({success:false,message:'Failed. Fill all fields.'});\n  }\n}\n\nexport const fetchQuestions = (req,res) => {\n  console.log('fetchQuestions: '+JSON.stringify(req.params));\n  let qBid = req.params.qBid || null;\n  let page = parseInt(req.params.page) || null;\n  let limit = parseInt(req.params.limit) || null;\n  var last_skip_value = limit * (page - 1);\n  if(qBid && page && limit){\n     Question.find({qbank:qBid})\n               .populate({\n                 path:'options',\n                 options: { limit:10 }\n               })\n               .limit(limit)\n               .skip(last_skip_value)\n               .exec((err,ques) => {\n                 if(err) {\n                      console.log(err);\n                      return res.json({success:false,message:'Something going wrong',err});\n                 }\n                 else{\n                   if(ques){\n                     return res.json({\n                       success:true,\n                       message:'Questions Fetched Successfully',\n                       count:req.count,\n                       ques\n                     });\n                   }else{\n                     return res.json({success:false,message:'Something going wrong'});\n                   }\n                 }\n               })\n  }\n}\n\nexport const countQuestions = (req,res,next) => {\n  let qBid = req.params.qBid || null;\n  if (qBid) {\n    Question.find({qbank:qBid}).count((err,count) => {\n      if(err) {\n        console.log(err);\n        return res.json({success:false,message:'Something going wrong',err});\n   }\n   else{\n     req.count = count;\n     next();\n   }\n    })\n  }\n}\n\nexport const deleteQuestion = (req,res,next) => {\n  console.log('deleteQuestion: '+JSON.stringify(req.params));\n  let quesId = req.params.quesId;\n  if(quesId){\n    Question.findByIdAndRemove(quesId,(err,ques) => {\n      if(err) {\n           console.log(err);\n           return res.json({success:false,message:'Something going wrong',err});\n      }\n      else{\n        if(ques){console.log(ques)\n             req.ques = ques;\n             next();\n        }else{\n          return res.json({success:false,message:'Something going wrong'});\n        }\n      }\n    })\n  }\n}\n\nexport const updateQuestion = (req,res) => {\n  console.log('updateQuestion: '+JSON.stringify(req.body));\n  if(req.body){\n    let id = req.body._id;\n    Question.findOneAndUpdate(\n      { _id:id },\n      { $set:req.body },\n      { 'new':true }\n    ).populate({\n      path:'options',\n      options: { limit:10 }\n    }).exec((err,ques) => {\n      if(err) {\n           return res.json({success:false,message:'Something going wrong',err});\n      }\n      else{\n        if(ques){\n          return res.json({\n            success:true,\n            message:'Question Updated Successfully',\n            ques\n          });\n        }\n      }\n    });\n  }\n}\n\n"]}