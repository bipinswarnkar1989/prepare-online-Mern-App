{"version":3,"sources":["../../src/models/user.server.model.js"],"names":["SALT_WORK_FACTOR","Schema","userSchema","fullName","type","String","email","required","trim","unique","validate","password","profileId","profileType","gender","picture","createdAt","Date","default","now","bookMarks","ObjectId","ref","methods","toJSON","obj","toObject","pre","next","user","isModified","genSalt","err","salt","hash","comparePassword","cb","compare","isMatch","plugin","message","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AACA,IAAMA,mBAAmB,EAAzB;;AAEA,IAAIC,SAAS,mBAASA,MAAtB;;AAEA,IAAIC,aAAa,IAAID,MAAJ,CAAW;AACzBE,YAAU,EAACC,MAAMC,MAAP,EADe;AAEzBC,SAAO;AACLF,UAAMC,MADD,EACSE,UAAU,IADnB;AAELC,UAAM,IAFD,EAEOC,QAAQ,IAFf;AAGLC,cAAU;AAHL,GAFkB;AAOzBC,YAAU,EAAEP,MAAMC,MAAR,EAAgBE,UAAU,IAA1B,EAPe;AAQzBK,aAAWP,MARc;AASzBQ,eAAaR,MATY;AAUzBS,UAAQT,MAViB;AAWzBU,WAASV,MAXgB;AAY1BW,aAAU;AACRZ,UAAMa,IADE;AAERC,aAASD,KAAKE;AAFN,GAZgB;AAgB1BC,aAAU,CACR;AACEhB,UAAKH,OAAOoB,QADd;AAEEC,SAAI;AAFN,GADQ;AAhBgB,CAAX,CAAjB;;AAwBApB,WAAWqB,OAAX,CAAmBC,MAAnB,GAA4B,YAAW;AACrC,MAAIC,MAAM,KAAKC,QAAL,EAAV;AACA,SAAOD,IAAId,QAAX;AACA,SAAOc,GAAP;AACD,CAJD;;AAMA;;;AAGAvB,WAAWyB,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAc;AACnC,MAAIC,OAAO,IAAX;AACA;AACA,MAAI,CAACA,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EAAkC,OAAOF,MAAP;;AAElC;AACA,mBAAOG,OAAP,CAAe/B,gBAAf,EAAiC,UAACgC,GAAD,EAAKC,IAAL,EAAc;AAC7C;AACA,qBAAOC,IAAP,CAAYL,KAAKlB,QAAjB,EAA2BsB,IAA3B,EAAiC,UAACD,GAAD,EAAKE,IAAL,EAAc;AAC7C,UAAGF,GAAH,EAAQ,OAAOJ,KAAKI,GAAL,CAAP;;AAER;AACAH,WAAKlB,QAAL,GAAgBuB,IAAhB;AACAN;AACD,KAND;AAOD,GATD;AAWD,CAjBD;;AAoBA;;;;;;AAMC1B,WAAWqB,OAAX,CAAmBY,eAAnB,GAAqC,UAASxB,QAAT,EAAmByB,EAAnB,EAAuB;AACxD,mBAAOC,OAAP,CAAe1B,QAAf,EAAyB,KAAKA,QAA9B,EAAwC,UAASqB,GAAT,EAAcM,OAAd,EAAuB;AAC3D,QAAIN,GAAJ,EAAS,OAAOI,GAAGJ,GAAH,CAAP;AACTI,OAAG,IAAH,EAASE,OAAT;AACH,GAHD;AAIH,CALD;;AAOApC,WAAWqC,MAAX,oCAAmC,EAACC,SAAQ,kBAAT,EAAnC;;kBAEc,mBAASC,KAAT,CAAe,MAAf,EAAuBvC,UAAvB,C","file":"user.server.model.js","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\nimport uniqueValidator from 'mongoose-unique-validator';\nconst SALT_WORK_FACTOR = 10;\n\nvar Schema = mongoose.Schema;\n\nvar userSchema = new Schema({\n   fullName: {type: String},\n   email: {\n     type: String, required: true,\n     trim: true, unique: true,\n     validate: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/\n   },\n   password: { type: String, required: true },\n   profileId: String,\n   profileType: String,\n   gender: String,\n   picture: String,\n  createdAt:{\n    type: Date,\n    default: Date.now\n  },\n  bookMarks:[\n    {\n      type:Schema.ObjectId,\n      ref:'qBankBookMark'\n    }\n  ]\n});\n\nuserSchema.methods.toJSON = function() {\n  var obj = this.toObject();\n  delete obj.password;\n  return obj\n}\n\n/**\n * The pre-save hook method.\n */\nuserSchema.pre('save', function(next){\n  var user = this;\n  // only hash the password if it has been modified (or is new)\n  if (!user.isModified('password')) return next();\n\n  // generate a salt\n  bcrypt.genSalt(SALT_WORK_FACTOR, (err,salt) => {\n    //hash a password along with your new salt\n    bcrypt.hash(user.password, salt, (err,hash) => {\n      if(err) return next(err);\n\n      //override the cleartext password with the hashed one\n      user.password = hash;\n      next();\n    })\n  })\n\n});\n\n\n/**\n * Compare the passed password with the value in the database. A model method.\n *\n * @param {string} password\n * @returns {object} cb\n */\n userSchema.methods.comparePassword = function(password, cb) {\n     bcrypt.compare(password, this.password, function(err, isMatch) {\n         if (err) return cb(err);\n         cb(null, isMatch);\n     });\n };\n\n userSchema.plugin(uniqueValidator, {message:'is already taken'});\n\nexport default mongoose.model('User', userSchema);\n"]}